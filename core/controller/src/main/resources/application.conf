#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# common logging configuration see common scala
include "logging"
include "pekko-http-version"

# http://doc.akka.io/docs/akka-http/current/scala/http/configuration.html
# descriptions inlined below for convenience
pekko.http {
  server {
    # Bind to all interfaces in containerized environments
    bind-host = "0.0.0.0"
    default-http-port = 10001

    # Description:
    # If a request hasn't been responded to after the time period set here
    # a `org.apache.pekko.http.Timedout` message will be sent to the timeout handler.
    # Set to `infinite` to completely disable request timeouts.
    #
    # Explaining the set value:
    # The controller holds connections up to 60s for blocking invokes, and
    # all other operations are expected to complete quickly. We allow a grace
    # period in addition to the blocking invoke timeout.
    request-timeout = 65s

    # The maximum number of concurrently accepted connections when using the
    # `Http().bindAndHandle` methods.
    #
    # This setting doesn't apply to the `Http().bind` method which will still
    # deliver an unlimited backpressured stream of incoming connections.
    #
    # Note, that this setting limits the number of the connections on a best-effort basis.
    # It does *not* strictly guarantee that the number of established TCP connections will never
    # exceed the limit (but it will be approximately correct) because connection termination happens
    # asynchronously. It also does *not* guarantee that the number of concurrently active handler
    # flow materializations will never exceed the limit for the reason that it is impossible to reliably
    # detect when a materialization has ended.
    max-connections = 8192

    # Description:
    # Enables/disables support for statistics collection and querying.
    # Even though stats keeping overhead is small,
    # for maximum performance switch off when not needed.
    stats-support = off

    # Description:
    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle connection timeouts.
    #
    # Explaining the set value:
    # This must be greater than the request timeout.
    idle-timeout = 70s

    # Description:
    # Enables/disables automatic handling of HEAD requests.
    # If this setting is enabled the server dispatches HEAD requests as GET
    # requests to the application and automatically strips off all message
    # bodies from outgoing responses.
    # Note that, even when this setting is off the server will never send
    # out message bodies on responses to HEAD requests.
    # Default value today is on, hence need to explicitly set this to off
    transparent-head-requests = off

    parsing {
      # This indirectly puts a bound on the name of entities
      # 8k matches nginx default
      max-uri-length = 8k

      # This is 50MB to allow action attachments
      max-content-length = 50m
    }
  }
}

# Check out all pekko-remote options here:
# http://doc.akka.io/docs/akka/2.5.4/scala/general/configuration.html#config-akka-remote
pekko {
  java-flight-recorder.enabled = false
  remote {
    artery {
      enabled = on
      transport = tcp
    }
    log-remote-lifecycle-events = DEBUG
    log-received-messages = on
    log-sent-messages = on
  }
  cluster {
    # Disable legacy metrics in akka-cluster.
    metrics.enabled=off
  }
}

ssl-config {
  enabledCipherSuites = [
    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
    "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
    "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
  ]
  enabledProtocols = [
    "TLSv1.2"
  ]
}

whisk{
  # tracing configuration
  tracing {
    component = "Controller"
  }
  swagger-ui {
    file-system : true
    dir-path : "/swagger-ui/"
  }
  controller {
    username: "controller.user"
    password: "controller.pass"
  }
}
