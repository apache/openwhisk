#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

include classpath("application.conf")

kamon {
  modules {
    # Disable statsd in standalone mode as well.
    statsd-reporter {
      enabled = false
    }
  }
}

whisk {
  metrics {
    kamon-enabled = true
    kamon-tags-enabled = true
    prometheus-enabled = true
  }

  spi {
    ArtifactStoreProvider = "org.apache.openwhisk.core.database.memory.MemoryArtifactStoreProvider"
    MessagingProvider = "org.apache.openwhisk.connector.lean.LeanMessagingProvider"
    LoadBalancerProvider = "org.apache.openwhisk.core.loadBalancer.MuxBalancer"
    # Use cli based log store for all setups as its more stable to use
    # and does not require root user access
    LogStoreProvider = "org.apache.openwhisk.core.containerpool.docker.DockerCliLogStoreProvider"
    ContainerFactoryProvider = "org.apache.openwhisk.core.containerpool.docker.StandaloneDockerContainerFactoryProvider"
    EntitlementSpiProvider = "org.apache.openwhisk.core.entitlement.LocalEntitlementProvider"
    InvokerProvider = "org.apache.openwhisk.core.invoker.InvokerReactive"
    InvokerServerProvider = "org.apache.openwhisk.core.invoker.DefaultInvokerServer"
    DurationCheckerProvider = "org.apache.openwhisk.core.scheduler.queue.NoopDurationCheckerProvider"
  }

  info {
    build-no = "standalone"
    date = "???"
  }

  config {
    controller-instances = 1
    limits-actions-sequence-maxLength = 50
    limits-triggers-fires-perMinute = 60
    limits-actions-invokes-perMinute = 60
    limits-actions-invokes-concurrent = 30
  }

  loadbalancer {
    strategy {
      default = "org.apache.openwhisk.core.loadBalancer.LeanBalancer"
    }
  }

  controller {
    protocol = http

    # Bound only to localhost by default for better security
    interface = localhost
  }

  # Default set of users which are bootstrapped upon start
  users {
    whisk-system = "789c46b1-71f6-4ed5-8c54-816aa4f8c502:abczO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP"
    guest = "23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP"
  }

  docker {
    # Path to docker executuable. Generally its /var/lib/docker
    # executable =
    standalone.container-factory {
      #If enabled then pull would also be attempted for standard OpenWhisk images under`openwhisk` prefix
      pull-standard-images = true
    }

    container-factory {
      # Disable runc by default to keep things stable
      use-runc = false
    }
  }
  swagger-ui {
    file-system = false
    dir-path = "BOOT-INF/classes/swagger-ui"
  }

  standalone {
    redis {
      image = "redis:4.0"
    }

    api-gateway {
      image = "openwhisk/apigateway:0.11.0"
    }

    couchdb {
      image = "apache/couchdb:2.3"
      user = "whisk_admin"
      password = "some_passw0rd"
      prefix = "whisk_local_"
      volumes-enabled = true
      subject-views = [
        "auth_design_document_for_subjects_db_v2.0.0.json",
        "filter_design_document.json",
        "namespace_throttlings_design_document_for_subjects_db.json"
      ]
      whisk-views = [
        "whisks_design_document_for_entities_db_v2.1.0.json",
        "filter_design_document.json"
      ]
      activation-views = [
        "whisks_design_document_for_activations_db_v2.1.0.json",
        "whisks_design_document_for_activations_db_filters_v2.1.1.json",
        "filter_design_document.json",
        "activations_design_document_for_activations_db.json",
        "logCleanup_design_document_for_activations_db.json"
      ]
    }

    user-events {
      image = "openwhisk/user-events:nightly"
      prometheus-image = "prom/prometheus:v2.5.0"
      grafana-image = "grafana/grafana:6.1.6"
    }
  }
  apache-client {
    retry-no-http-response-exception = true
  }
  container-factory {
    container-args {
      extra-args {
        env += ${?CONTAINER_EXTRA_ENV}
      }
    }
  }
}

akka-http-cors {
  allow-generic-http-requests = yes
  allow-credentials = yes
  allowed-origins = "*"
  allowed-headers = "*"
  allowed-methods = ["GET", "POST", "HEAD", "OPTIONS"]
  exposed-headers = []
  max-age = 1800 seconds
}
