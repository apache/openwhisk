#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


pekko {
  actor {
    provider = cluster
    allow-java-serialization = off
    serializers {
      kryo = "io.altoo.serialization.kryo.pekko.PekkoKryoSerializer"
    }
    serialization-bindings {
      "org.apache.openwhisk.core.scheduler.queue.CreateQueue" = kryo
      "org.apache.openwhisk.core.scheduler.queue.CreateQueueResponse" = kryo
      "org.apache.openwhisk.core.connector.ActivationMessage" = kryo
    }
    kryo {
      idstrategy = "automatic"
      classes = [
        "org.apache.openwhisk.core.scheduler.queue.CreateQueue",
        "org.apache.openwhisk.core.scheduler.queue.CreateQueueResponse",
        "org.apache.openwhisk.core.connector.ActivationMessage"
      ]
    }
  }

  remote {
    artery {
      enabled = on
      transport = tcp
    }
    
    # Pekko-Akka compatibility: Allow Pekko nodes to join existing Akka clusters
    # Phase 1: Pekko nodes use Akka protocol to join Akka cluster
    # See: https://cwiki.apache.org/confluence/display/PEKKO/Pekko+Akka+Compatibility
    # 
    # TODO: Remove these settings once all cluster nodes are running Pekko.
    # After migration, switch to: protocol-name = "pekko" and accept-protocol-names = ["pekko"]
    protocol-name = "akka"
    accept-protocol-names = ["akka", "pekko"]
  }

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s

    # Disable legacy metrics in pekko-cluster.
    metrics.enabled = off
    
    # Pekko-Akka compatibility: Disable strict configuration checks during mixed cluster operation
    # This allows Pekko nodes to join Akka clusters without configuration mismatch errors
    # TODO: Remove this setting once all cluster nodes are running Pekko (can re-enable checks)
    configuration-compatibility-check.enforce-on-join = no
  }
}

pekko-kryo-serialization.kryo-initializer = "org.apache.openwhisk.core.scheduler.CompatibleKryoInitializer"

whisk {
  cluster {
    use-cluster-bootstrap: false
  }

  # tracing configuration
  tracing {
    component = "Scheduler"
  }

  fraction {
      managed-fraction: 90%
      blackbox-fraction: 10%
  }

  scheduler {
    protocol = "http"
    username: "scheduler.user"
    password: "scheduler.pass"
    grpc {
      tls = "false"
    }
    scheduling {
      stale-threshold = "100 milliseconds"
      check-interval = "100 milliseconds"
      drop-interval = "10 seconds"
      allow-over-provision-before-throttle = false
      namespace-over-provision-before-throttle-ratio = 1.5
    }
    queue {
      idle-grace = "20 seconds"
      stop-grace = "20 seconds"
      flush-grace = "60 seconds"
      graceful-shutdown-timeout = "5 seconds"
      max-retention-size = "10000"
      max-retention-ms = "60000"
      max-blackbox-retention-ms = "300000"
      throttling-fraction = "0.9"
      duration-buffer-size = "10"
      fail-throttle-as-whisk-error = "false"
    }
    queue-manager {
      max-scheduling-time = "20 seconds"
      max-retries-to-get-queue = "13"
    }
    max-peek = "128"
    in-progress-job-retention = "20 seconds"
    blackbox-multiple = "15"
    data-management-service {
        retry-interval = "1 second"
    }
  }
}
