/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'application'
    id 'eclipse'
    id 'maven-publish'
    id 'org.scoverage'
    id 'scala'
}

ext.dockerImageName = 'user-events'
apply from: "../../../gradle/docker.gradle"
distDocker.dependsOn ':common:scala:distDocker', 'distTar'

project.archivesBaseName = "openwhisk-user-events"

scoverage {
    scoverageVersion.set("${gradle.scala.scoverageVersion}")
    scoverageScalaVersion.set("${gradle.scala.scoverageScalaVersion}")
}

dependencies {
    implementation "org.scala-lang:scala-library:${gradle.scala.version}"
    implementation project(':common:scala')

    implementation "org.apache.pekko:pekko-connectors-kafka_${gradle.scala.depVersion}:${gradle.pekko_kafka.version}"

    implementation "io.prometheus:simpleclient:0.6.0"
    implementation "io.prometheus:simpleclient_common:0.6.0"

    testImplementation "junit:junit:4.11"
    testImplementation "org.scalatest:scalatest_${gradle.scala.depVersion}:3.2.14"
    testImplementation "org.scalatestplus:junit-4-13_${gradle.scala.depVersion}:3.2.14.0"
    testImplementation "io.github.embeddedkafka:embedded-kafka_${gradle.scala.depVersion}:3.5.1"
    constraints {
        testImplementation("io.github.embeddedkafka:embedded-kafka_${gradle.scala.depVersion}:3.5.1")
    }
    testImplementation "org.apache.pekko:pekko-connectors-kafka-testkit_${gradle.scala.depVersion}:${gradle.pekko_kafka.version}"
    testImplementation "org.apache.pekko:pekko-testkit_${gradle.scala.depVersion}:${gradle.pekko.version}"
    testImplementation "org.apache.pekko:pekko-stream-testkit_${gradle.scala.depVersion}:${gradle.pekko.version}"
    testImplementation "org.apache.pekko:pekko-http-testkit_${gradle.scala.depVersion}:${gradle.pekko_http.version}"
}

mainClassName = "org.apache.openwhisk.core.monitoring.metrics.Main"

gradle.projectsEvaluated {
    tasks.withType(Test) {
        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
}
